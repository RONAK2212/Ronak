Task 54: Reverse Number
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.widget.EditText;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final EditText inputNumber = findViewById(R.id.inputNumber);
        final TextView reversedNumber = findViewById(R.id.reversedNumber);

        inputNumber.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int start, int before, int count) {}

            @Override
            public void onTextChanged(CharSequence charSequence, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable editable) {
                String originalNumber = editable.toString();
                String reversed = new StringBuilder(originalNumber).reverse().toString();
                reversedNumber.setText("Reversed Number: " + reversed);
            }
        });
    }
}


Task 55: Display Numbers Between Two Inputs in Next Activity
java
Copy code
// MainActivity.java
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final EditText inputNumber1 = findViewById(R.id.inputNumber1);
        final EditText inputNumber2 = findViewById(R.id.inputNumber2);

        Button displayNumbersButton = findViewById(R.id.displayNumbersButton);
        displayNumbersButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int num1 = Integer.parseInt(inputNumber1.getText().toString());
                int num2 = Integer.parseInt(inputNumber2.getText().toString());

                Intent intent = new Intent(MainActivity.this, NumbersActivity.class);
                intent.putExtra("num1", num1);
                intent.putExtra("num2", num2);
                startActivity(intent);
            }
        });
    }
}

// NumbersActivity.java
import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class NumbersActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_numbers);

        TextView numbersTextView = findViewById(R.id.numbersTextView);

        int num1 = getIntent().getIntExtra("num1", 0);
        int num2 = getIntent().getIntExtra("num2", 0);

        StringBuilder numbers = new StringBuilder();
        for (int i = num1; i <= num2; i++) {
            numbers.append(i).append(", ");
        }

        numbersTextView.setText("Numbers between " + num1 + " and " + num2 + ": " + numbers);
    }
}


Task 56: Calculator with Radio Buttons
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final EditText number1EditText = findViewById(R.id.number1);
        final EditText number2EditText = findViewById(R.id.number2);
        final RadioGroup operationRadioGroup = findViewById(R.id.operationRadioGroup);
        final TextView resultTextView = findViewById(R.id.result);

        Button calculateButton = findViewById(R.id.calculateButton);
        calculateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int selectedId = operationRadioGroup.getCheckedRadioButtonId();
                RadioButton selectedRadioButton = findViewById(selectedId);

                double num1 = Double.parseDouble(number1EditText.getText().toString());
                double num2 = Double.parseDouble(number2EditText.getText().toString());
                String operation = selectedRadioButton.getText().toString();

                double result = 0;
                switch (operation) {
                    case "Add":
                        result = num1 + num2;
                        break;
                    case "Subtraction":
                        result = num1 - num2;
                        break;
                    case "Multiply":
                        result = num1 * num2;
                        break;
                    case "Division":
                        if (num2 != 0) {
                            result = num1 / num2;
                        }
                        break;
                }

                resultTextView.setText("Result: " + result);
            }
        });
    }
}

Task 57: Change Background on Button Click
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final View mainLayout = findViewById(R.id.mainLayout);
        Button changeBackgroundButton = findViewById(R.id.changeBackgroundButton);

        changeBackgroundButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Change background color to a random color or as desired
                int randomColor = getRandomColor();
                mainLayout.setBackgroundColor(randomColor);
            }
        });
    }

    private int getRandomColor() {
        // Generate a random color
        Random random = new Random();
        return Color.argb(255, random.nextInt(256), random.nextInt(256), random.nextInt(256));
    }
}


Task 58: Increase/Decrease Font Size on Button Click
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private static final float INITIAL_FONT_SIZE = 20;

    private TextView textView;
    private float currentFontSize;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textView = findViewById(R.id.textView);
        currentFontSize = INITIAL_FONT_SIZE;

        Button increaseButton = findViewById(R.id.increaseButton);
        Button decreaseButton = findViewById(R.id.decreaseButton);

        increaseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                currentFontSize += 2;
                textView.setTextSize(currentFontSize);
            }
        });

        decreaseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (currentFontSize > 2) {
                    currentFontSize -= 2;
                    textView.setTextSize(currentFontSize);
                }
            }
        });
    }
}


Task 59: Display N EditText Based on User Input
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final LinearLayout editTextContainer = findViewById(R.id.editTextContainer);
        final EditText nEditText = findViewById(R.id.nEditText);

        // Add an event listener to create EditText views dynamically
        nEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) {
                if (actionId == EditorInfo.IME_ACTION_DONE) {
                    int n = Integer.parseInt(nEditText.getText().toString());
                    createEditTexts(n, editTextContainer);
                    return true;
                }
                return false;
            }
        });
    }

    private void createEditTexts(int n, LinearLayout container) {
        container.removeAllViews(); // Clear existing EditText views

        for (int i = 0; i < n; i++) {
            EditText editText = new EditText(this);
            editText.setHint("Enter value " + (i + 1));
            container.addView(editText);
        }
    }
}

Task 60: Display TextView Based on Checkbox State
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.CheckBox;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final CheckBox checkBox = findViewById(R.id.checkBox);
        final TextView textView = findViewById(R.id.textView);

        checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                textView.setVisibility(isChecked ? View.VISIBLE : View.GONE);
            }
        });
    }
}

Task 61: Display Four Images Around TextView
java
Copy code
<!-- activity_main.xml -->
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/mainLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/image1"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:src="@drawable/image1"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"/>

    <ImageView
        android:id="@+id/image2"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:src="@drawable/image2"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"/>

    <ImageView
        android:id="@+id/image3"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:src="@drawable/image3"
        android:layout_alignParentLeft="true"
        android:layout_centerVertical="true"/>

    <ImageView
        android:id="@+id/image4"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:src="@drawable/image4"
        android:layout_alignParentRight="true"
        android:layout_centerVertical="true"/>

    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="This is a TextView"
        android:layout_centerInParent="true"
        android:layout_marginTop="20dp"/>
</RelativeLayout>


Task 62: Display Screen Color Based on RadioButton Selection
java
Copy code
// MainActivity.java
import android.graphics.Color;
import android.os.Bundle;
import android.widget.RadioGroup;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final RadioGroup colorRadioGroup = findViewById(R.id.colorRadioGroup);

        colorRadioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup radioGroup, int checkedId) {
                switch (checkedId) {
                    case R.id.redRadioButton:
                        setScreenColor(Color.RED);
                        break;
                    case R.id.greenRadioButton:
                        setScreenColor(Color.GREEN);
                        break;
                    case R.id.blueRadioButton:
                        setScreenColor(Color.BLUE);
                        break;
                    // Add more cases for additional colors
                }
            }
        });
    }

    private void setScreenColor(int color) {
        getWindow().getDecorView().setBackgroundColor(color);
    }
}


Task 63: Three SeekBar Controls
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.widget.SeekBar;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SeekBar seekBar1 = findViewById(R.id.seekBar1);
        SeekBar seekBar2 = findViewById(R.id.seekBar2);
        SeekBar seekBar3 = findViewById(R.id.seekBar3);

        // Add listeners to respond when SeekBar values change
        seekBar1.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                updateBackgroundColor();
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });

        seekBar2.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                updateBackgroundColor();
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });

        seekBar3.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                updateBackgroundColor();
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });
    }

    private void updateBackgroundColor() {
        SeekBar seekBar1 = findViewById(R.id.seekBar1);
        SeekBar seekBar2 = findViewById(R.id.seekBar2);
        SeekBar seekBar3 = findViewById(R.id.seekBar3);

        int red = seekBar1.getProgress();
        int green = seekBar2.getProgress();
        int blue = seekBar3.getProgress();

        int backgroundColor = Color.rgb(red, green, blue);

        getWindow().getDecorView().setBackgroundColor(backgroundColor);
    }
}


64. From three Seekbar which Seekbar value changed the background color of device
will be changed.

Create the layout XML file (e.g., activity_main.xml):

xml
Copy code
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <SeekBar
        android:id="@+id/seekBar1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:max="255"
        android:layout_marginTop="16dp"
        android:layout_marginBottom="16dp"/>

    <SeekBar
        android:id="@+id/seekBar2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:max="255"
        android:layout_below="@id/seekBar1"
        android:layout_marginTop="16dp"
        android:layout_marginBottom="16dp"/>

    <SeekBar
        android:id="@+id/seekBar3"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:max="255"
        android:layout_below="@id/seekBar2"
        android:layout_marginTop="16dp"
        android:layout_marginBottom="16dp"/>

</RelativeLayout>
In your MainActivity.kt file:

kotlin
Copy code
import android.graphics.Color
import android.os.Bundle
import android.widget.SeekBar
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val seekBar1 = findViewById<SeekBar>(R.id.seekBar1)
        val seekBar2 = findViewById<SeekBar>(R.id.seekBar2)
        val seekBar3 = findViewById<SeekBar>(R.id.seekBar3)
        val mainLayout = findViewById<RelativeLayout>(R.id.mainLayout)

        // Set up SeekBar listeners
        seekBar1.setOnSeekBarChangeListener(createSeekBarChangeListener(mainLayout))
        seekBar2.setOnSeekBarChangeListener(createSeekBarChangeListener(mainLayout))
        seekBar3.setOnSeekBarChangeListener(createSeekBarChangeListener(mainLayout))
    }

    private fun createSeekBarChangeListener(layout: RelativeLayout) =
        object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                // Combine the progress values from all SeekBars to create a color
                val color = Color.rgb(
                    seekBar1.progress,
                    seekBar2.progress,
                    seekBar3.progress
                )

                // Set the background color of the layout
                layout.setBackgroundColor(color)
            }

            override fun onStartTrackingTouch(seekBar: SeekBar?) {
                // Not needed for this example
            }

            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                // Not needed for this example
            }
        }
}


Task 65: Custom Toolbar with Spinner and Search Functionality
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        // Spinner
        Spinner spinner = findViewById(R.id.spinner);
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
                this, R.array.spinner_items, android.R.layout.simple_spinner_item);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);

        // Spinner item selection listener
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parentView, View selectedItemView, int position, long id) {
                // Handle spinner item selection
                String selectedOption = parentView.getItemAtPosition(position).toString();
                Toast.makeText(MainActivity.this, "Selected: " + selectedOption, Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parentView) {
            }
        });
    }
}


Task 66: Simple AlertDialog with Title, Description, and Icon
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showAlertDialog();
            }
        });
    }

    private void showAlertDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Alert Title")
                .setMessage("This is a simple alert dialog with description and icon.")
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setPositiveButton("OK", null) // You can add listeners for positive, negative, and neutral buttons
                .show();
    }
}


Task 67: AlertDialog with Positive, Negative, and Neutral Buttons
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showAlertDialog();
            }
        });
    }

    private void showAlertDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Alert Title")
                .setMessage("This is an alert dialog with positive, negative, and neutral buttons.")
                .setIcon(android.R.drawable.ic_dialog_info)
                .setPositiveButton("Yes", null) // Replace null with an actual listener
                .setNegativeButton("No", null) // Replace null with an actual listener
                .setNeutralButton("Cancel", null) // Replace null with an actual listener
                .show();
    }
}


Task 68: AlertDialog with List of Cities and Single Choice Selection
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showCitySelectionDialog();
            }
        });
    }

    private void showCitySelectionDialog() {
        final CharSequence[] cities = {"City A", "City B", "City C", "City D"};

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Select a City")
                .setSingleChoiceItems(cities, -1, null) // Replace null with an actual listener
                .setPositiveButton("OK", null) // Replace null with an actual listener
                .setNegativeButton("Cancel", null) // Replace null with an actual listener
                .show();
    }
}


Task 69: Open AlertDialog When User Wants to Exit
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        findViewById(R.id.exitButton).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showExitConfirmationDialog();
            }
        });
    }

    private void showExitConfirmationDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Exit Confirmation")
                .setMessage("Are you sure you want to exit?")
                .setPositiveButton("Yes", null) // Replace null with an actual listener to exit the app
                .setNegativeButton("No", null) // Replace null with an actual listener to cancel exit
                .show();
    }
}


Task 70: Select Date on Button Click
java
Copy code
// MainActivity.java
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final DatePicker datePicker = findViewById(R.id.datePicker);
        Button selectDateButton = findViewById(R.id.selectDateButton);

        selectDateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                int day = datePicker.getDayOfMonth();
                int month = datePicker.getMonth() + 1; // Month is 0-based
                int year = datePicker.getYear();

                String selectedDate = day + "/" + month + "/" + year;
                // Handle the selected date as needed
            }
        });
    }
}


Task 71: Different Menus in Android
Android provides three main types of menus:

Options Menu:
Options menu is a primary collection of menu items for an activity. It is typically displayed at the top of the activity and contains actions that are relevant to the current context.

java
Copy code
// MainActivity.java
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.options_menu, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case R.id.menu_item1:
            // Handle item1 click
            return true;
        case R.id.menu_item2:
            // Handle item2 click
            return true;
        // Add more cases for additional menu items
        default:
            return super.onOptionsItemSelected(item);
    }
}
Context Menu:
Context menu is a floating menu that appears when the user performs a long press on an element. It contains actions relevant to the selected element.

java
Copy code
// MainActivity.java
@Override
public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
    getMenuInflater().inflate(R.menu.context_menu, menu);
}

@Override
public boolean onContextItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case R.id.context_item1:
            // Handle context_item1 click
            return true;
        case R.id.context_item2:
            // Handle context_item2 click
            return true;
        // Add more cases for additional context menu items
        default:
            return super.onContextItemSelected(item);
    }
}
Popup Menu:
Popup menu is a modal menu that appears when the user taps on a view. It is anchored to the view and displays a list of items.

java
Copy code
// MainActivity.java
@Override
public void onClick(View view) {
    PopupMenu popupMenu = new PopupMenu(this, view);
    popupMenu.getMenuInflater().inflate(R.menu.popup_menu, popupMenu.getMenu());

    popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
        @Override
        public boolean onMenuItemClick(MenuItem item) {
            switch (item.getItemId()) {
                case R.id.popup_item1:
                    // Handle popup_item1 click
                    return true;
                case R.id.popup_item2:
                    // Handle popup_item2 click
                    return true;
                // Add more cases for additional popup menu items
                default:
                    return false;
            }
        }
    });

    popupMenu.show();
}


Task 72: Display Profile and Logout Options in Options Menu
java
Copy code
// MainActivity.java
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.profile_menu, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case R.id.menu_profile:
            // Handle profile click
            return true;
        case R.id.menu_logout:
            // Handle logout click
            return true;
        default:
            return super.onOptionsItemSelected(item);
    }
}


Task 73: Display Edit, View, Delete Options with Context Menu in ListView
java
Copy code
// MainActivity.java
@Override
public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
    getMenuInflater().inflate(R.menu.listview_context_menu, menu);
}

@Override
public boolean onContextItemSelected(MenuItem item) {
    AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
    switch (item.getItemId()) {
        case R.id.context_edit:
            // Handle edit click for the selected item
            return true;
        case R.id.context_view:
            // Handle view click for the selected item
            return true;
        case R.id.context_delete:
            // Handle delete click for the selected item
            return true;
        default:
            return super.onContextItemSelected(item);
    }
}


Task 74: Gmail-Like Application with Screens According to User Selection
java
Copy code
// MainActivity.java
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final ListView listView = findViewById(R.id.listView);
        final String[] screens = {"Inbox", "Sent", "Drafts", "Trash"};

        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, screens);
        listView.setAdapter(adapter);

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String selectedScreen = screens[position];
                Intent intent = new Intent(MainActivity.this, ScreenActivity.class);
                intent.putExtra("screen", selectedScreen);
                startActivity(intent);
            }
        });
    }
}


75. Bottom Navigation with 3 Tabs (Gallery, Audio, Video)
dart
Copy code
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: BottomNavigationExample(),
    );
  }
}

class BottomNavigationExample extends StatefulWidget {
  @override
  _BottomNavigationExampleState createState() => _BottomNavigationExampleState();
}

class _BottomNavigationExampleState extends State<BottomNavigationExample> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bottom Navigation Example'),
      ),
      body: _getBody(),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.image),
            label: 'Gallery',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.audiotrack),
            label: 'Audio',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.videocam),
            label: 'Video',
          ),
        ],
      ),
    );
  }

  Widget _getBody() {
    // Replace this with your logic to display different pages based on the current index.
    switch (_currentIndex) {
      case 0:
        return GalleryPage();
      case 1:
        return AudioPage();
      case 2:
        return VideoPage();
      default:
        return Container();
    }
  }
}

class GalleryPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Gallery Page - Dummy Data'),
    );
  }
}

class AudioPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Audio Page - Dummy Data'),
    );
  }
}

class VideoPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Video Page - Dummy Data'),
    );
  }
}


76. Navigation Drawer with 3 Tabs (Gallery, Audio, Video)
dart
Copy code
// Similar to the Bottom Navigation example, but with a Drawer.
// Refer to the official Flutter documentation for Navigation Drawer implementation.


77. Phone Call App with Permission Dialog
dart
Copy code
// Implementing permission requests in Flutter might be a bit different.
// Consider using the permission_handler package.

import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: PhoneCallApp(),
    );
  }
}

class PhoneCallApp extends StatefulWidget {
  @override
  _PhoneCallAppState createState() => _PhoneCallAppState();
}

class _PhoneCallAppState extends State<PhoneCallApp> {
  @override
  void initState() {
    super.initState();
    _requestPhoneCallPermission();
  }

  _requestPhoneCallPermission() async {
    var status = await Permission.phone.request();
    if (status.isDenied) {
      _showPermissionDialog();
    }
  }

  _showPermissionDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Permission Request"),
          content: Text("This app needs phone call permission to function properly."),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                Permission.phone.openSettings();
              },
              child: Text("Allow"),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                // Handle denial or show a message to the user
              },
              child: Text("Deny"),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Phone Call App'),
      ),
      body: Center(
        child: Text('Phone Call App - Dummy Data'),
      ),
    );
  }
}


78. Splash Screen using Activity
dart
Copy code
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    Future.delayed(
      Duration(seconds: 2),
      () {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => MainActivity()),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Text('Splash Screen'),
      ),
    );
  }
}

class MainActivity extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Main Activity'),
      ),
      body: Center(
        child: Text('Main Activity'),
      ),
    );
  }
}


79. Redirect from one activity to another on button click
dart
Copy code
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: FirstActivity(),
    );
  }
}

class FirstActivity extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('First Activity'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => SecondActivity()),
            );
          },
          child: Text('Go to Second Activity'),
        ),
      ),
    );
  }
}

class SecondActivity extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Activity'),
      ),
      body: Center(
        child: Text('Second Activity'),
      ),
    );
  }
}


80. Manage Activity Lifecycle Stages and Showing Toast
dart
Copy code
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LifecycleExample(),
    );
  }
}

class LifecycleExample extends StatefulWidget {
  @override
  _LifecycleExampleState createState() => _LifecycleExampleState();
}

class _LifecycleExampleState extends State<LifecycleExample> with WidgetsBindingObserver {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    showToast("App Lifecycle State: $state");
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lifecycle Example'),
      ),
      body: Center(
        child: Text('App Lifecycle Example'),
      ),
    );
  }

  void showToast(String message) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text(message),
    ));
  }
}


81. Application to take input two numbers and display the sum in the next Activity
dart
Copy code
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: InputNumbersActivity(),
    );
  }
}

class InputNumbersActivity extends StatelessWidget {
  final TextEditingController num1Controller = TextEditingController();
  final TextEditingController num2Controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Input Numbers'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: num1Controller,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(labelText: 'Enter Number 1'),
            ),
            TextField(
              controller: num2Controller,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(labelText: 'Enter Number 2'),
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: () {
                int num1 = int.tryParse(num1Controller.text) ?? 0;
                int num2 = int.tryParse(num2Controller.text) ?? 0;

                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => SumActivity(result: num1 + num2),
                  ),
                );
              },
              child: Text('Calculate Sum'),
            ),
          ],
        ),
      ),
    );
  }
}

class SumActivity extends StatelessWidget {
  final int result;

  SumActivity({required this.result});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sum Activity'),
      ),
      body: Center(
        child: Text('Sum: $result'),
      ),
    );
  }
}


82. Call, Send SMS, Mail, Share
For this example, you can use the url_launcher package to open phone calls, SMS, emails, and share functionalities. Make sure to add the url_launcher package to your pubspec.yaml file.

yaml
Copy code
dependencies:
  url_launcher: ^6.0.12
Then run flutter pub get to install the package.

dart
Copy code
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ContactOptions(),
    );
  }
}

class ContactOptions extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Contact Options'),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          ElevatedButton(
            onPressed: () => _makePhoneCall('tel:+123456789'),
            child: Text('Call'),
          ),
          ElevatedButton(
            onPressed: () => _sendSms('sms:+123456789'),
            child: Text('Send SMS'),
          ),
          ElevatedButton(
            onPressed: () => _sendEmail('mailto:recipient@example.com'),
            child: Text('Send Email'),
          ),
          ElevatedButton(
            onPressed: () => _shareText('Sharing this text.'),
            child: Text('Share'),
          ),
        ],
      ),
    );
  }

  _makePhoneCall(String phoneNumber) async {
    if (await canLaunch(phoneNumber)) {
      await launch(phoneNumber);
    } else {
      // Handle error
    }
  }

  _sendSms(String phoneNumber) async {
    if (await canLaunch(phoneNumber)) {
      await launch(phoneNumber);
    } else {
      // Handle error
    }
  }

  _sendEmail(String email) async {
    if (await canLaunch(email)) {
      await launch(email);
    } else {
      // Handle error
    }
  }

  _shareText(String text) async {
    if (await canLaunch('https://wa.me/?text=$text')) {
      await launch('https://wa.me/?text=$text');
    } else {
      // Handle error
    }
  }
}

83. Write a program to add name from the text view and insert into the listview. If you
click on the list view then name should be show in the dialog box. When user press for 2
seconds on particular List item then open Context Menu (Delete Item, Edit Item, Exit).
If user click on Delete Item then Open one Alert Dialog with message (“Are you sure
want to delete Item?”) and yes, no button if user press yes button then remove item
from list. (Click a DELETE button, it gives a confirm box) If user click on Edit item
then selected item display on EditText and again user click on button then this
(updated item) should be replace with old item.

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> names = [];
  TextEditingController editingController = TextEditingController();
  String selectedItem = "";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('List View Example'),
      ),
      body: Column(
        children: [
          TextField(
            decoration: InputDecoration(labelText: 'Enter Name'),
            onSubmitted: (value) {
              setState(() {
                names.add(value);
              });
            },
          ),
          Expanded(
            child: ListView.builder(
              itemCount: names.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(names[index]),
                  onTap: () {
                    showAlertDialog(names[index]);
                  },
                  onLongPress: () {
                    showContextMenu(names[index]);
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void showAlertDialog(String name) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Selected Item'),
          content: Text('You clicked on $name'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void showContextMenu(String name) {
    selectedItem = name;
    showMenu(
      context: context,
      position: RelativeRect.fromLTRB(0, 100, 0, 0),
      items: [
        PopupMenuItem(
          child: ListTile(
            leading: Icon(Icons.edit),
            title: Text('Edit Item'),
            onTap: () {
              Navigator.of(context).pop();
              showEditDialog();
            },
          ),
        ),
        PopupMenuItem(
          child: ListTile(
            leading: Icon(Icons.delete),
            title: Text('Delete Item'),
            onTap: () {
              Navigator.of(context).pop();
              showDeleteConfirmationDialog();
            },
          ),
        ),
      ],
    );
  }

  void showEditDialog() {
    editingController.text = selectedItem;
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Edit Item'),
          content: TextField(
            controller: editingController,
          ),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  int index = names.indexOf(selectedItem);
                  names[index] = editingController.text;
                });
                Navigator.of(context).pop();
              },
              child: Text('Update'),
            ),
          ],
        );
      },
    );
  }

  void showDeleteConfirmationDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Confirm Deletion'),
          content: Text('Are you sure you want to delete $selectedItem?'),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  names.remove(selectedItem);
                });
                Navigator.of(context).pop();
              },
              child: Text('Yes'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('No'),
            ),
          ],
        );
      },
    );
  }
}

